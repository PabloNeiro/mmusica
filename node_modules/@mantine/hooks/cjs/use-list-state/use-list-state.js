'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useListState(initialValue = []) {
  const [state, setState] = react.useState(initialValue);
  const append = (...items) => {
    const newState = [...state, ...items];
    setState(newState);
    return newState;
  };
  const prepend = (...items) => {
    const newState = [...items, ...state];
    setState(newState);
    return newState;
  };
  const insert = (index, ...items) => {
    const newState = [...state.slice(0, index), ...items, ...state.slice(index)];
    setState(newState);
    return newState;
  };
  const apply = (fn) => {
    const newState = state.map((item, index) => fn(item, index));
    setState(newState);
    return newState;
  };
  const remove = (...indices) => {
    const newState = state.filter((_, index) => !indices.includes(index));
    setState(newState);
    return newState;
  };
  const pop = () => {
    const cloned = [...state];
    cloned.pop();
    setState(cloned);
    return cloned;
  };
  const shift = () => {
    const cloned = [...state];
    cloned.shift();
    setState(cloned);
    return cloned;
  };
  const reorder = ({ from, to }) => {
    const cloned = [...state];
    const item = state[from];
    cloned.splice(from, 1);
    cloned.splice(to, 0, item);
    setState(cloned);
    return cloned;
  };
  const setItem = (index, item) => {
    const cloned = [...state];
    cloned[index] = item;
    setState(cloned);
    return cloned;
  };
  const setItemProp = (index, prop, value) => {
    const cloned = [...state];
    cloned[index] = __spreadProps(__spreadValues({}, cloned[index]), { [prop]: value });
    setState(cloned);
    return cloned;
  };
  const applyWhere = (condition, fn) => {
    const newState = state.map((item, index) => condition(item, index) ? fn(item, index) : item);
    setState(newState);
    return newState;
  };
  return [
    state,
    {
      setState,
      append,
      prepend,
      insert,
      pop,
      shift,
      apply,
      applyWhere,
      remove,
      reorder,
      setItem,
      setItemProp
    }
  ];
}

exports.useListState = useListState;
//# sourceMappingURL=use-list-state.js.map
